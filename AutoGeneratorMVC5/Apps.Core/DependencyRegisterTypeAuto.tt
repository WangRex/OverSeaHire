<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="../Apps.Models/Common.ttinclude"#><#@ 
 output extension=".cs"#>using Microsoft.Practices.Unity;
namespace Apps.Core
{
    public partial class DependencyRegisterType
    {
        public static void Container(ref UnityContainer container)
        {
 <#
const string usingName = "";
const string inputFile = @"../Apps.Models/DB.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
		if(!entity.Name.StartsWith("V_"))
        {
           
			var simpleProperties = typeMapper.GetSimpleProperties(entity);
#>
			container.RegisterType<Apps.IBLL.<#=(entity.Name.IndexOf("_") > 0)?entity.Name.Substring(0, entity.Name.IndexOf("_")):"Sys" #>.I<#=entity.Name#>BLL, Apps.BLL.<#=(entity.Name.IndexOf("_") > 0)?entity.Name.Substring(0, entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name#>BLL>();
			container.RegisterType<Apps.IDAL.<#=(entity.Name.IndexOf("_") > 0)?entity.Name.Substring(0, entity.Name.IndexOf("_")):"Sys" #>.I<#=entity.Name#>Repository, Apps.DAL.<#=(entity.Name.IndexOf("_") > 0)?entity.Name.Substring(0, entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name#>Repository>();
<#
      
        }
}


#>
        }
    }
}