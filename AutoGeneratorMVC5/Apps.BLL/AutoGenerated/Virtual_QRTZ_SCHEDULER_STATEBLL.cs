//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.IBLL;
using Apps.IDAL;
using Apps.BLL.Core;
using Apps.Locale;
using Apps.IDAL.QRTZ;
using Apps.Models.QRTZ;
namespace Apps.BLL.QRTZ
{
	public class Virtual_QRTZ_SCHEDULER_STATEBLL
	{
        [Dependency]
        public IQRTZ_SCHEDULER_STATERepository m_Rep { get; set; }

		public virtual List<QRTZ_SCHEDULER_STATEModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<QRTZ_SCHEDULER_STATE> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								a=>a.SCHED_NAME.Contains(queryStr)
								|| a.INSTANCE_NAME.Contains(queryStr)
								
								
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }
        public virtual List<QRTZ_SCHEDULER_STATEModel> CreateModelList(ref IQueryable<QRTZ_SCHEDULER_STATE> queryData)
        {

            List<QRTZ_SCHEDULER_STATEModel> modelList = (from r in queryData
                                              select new QRTZ_SCHEDULER_STATEModel
                                              {
													SCHED_NAME = r.SCHED_NAME,
													INSTANCE_NAME = r.INSTANCE_NAME,
													LAST_CHECKIN_TIME = r.LAST_CHECKIN_TIME,
													CHECKIN_INTERVAL = r.CHECKIN_INTERVAL,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, QRTZ_SCHEDULER_STATEModel model)
        {
            try
            {
                QRTZ_SCHEDULER_STATE entity = m_Rep.GetById(model.SCHED_NAME);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new QRTZ_SCHEDULER_STATE();
               				entity.SCHED_NAME = model.SCHED_NAME;
				entity.INSTANCE_NAME = model.INSTANCE_NAME;
				entity.LAST_CHECKIN_TIME = model.LAST_CHECKIN_TIME;
				entity.CHECKIN_INTERVAL = model.CHECKIN_INTERVAL;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, string id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, string[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, QRTZ_SCHEDULER_STATEModel model)
        {
            try
            {
                QRTZ_SCHEDULER_STATE entity = m_Rep.GetById(model.SCHED_NAME);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.SCHED_NAME = model.SCHED_NAME;
				entity.INSTANCE_NAME = model.INSTANCE_NAME;
				entity.LAST_CHECKIN_TIME = model.LAST_CHECKIN_TIME;
				entity.CHECKIN_INTERVAL = model.CHECKIN_INTERVAL;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual QRTZ_SCHEDULER_STATEModel GetById(string id)
        {
            if (IsExists(id))
            {
                QRTZ_SCHEDULER_STATE entity = m_Rep.GetById(id);
                QRTZ_SCHEDULER_STATEModel model = new QRTZ_SCHEDULER_STATEModel();
                              				model.SCHED_NAME = entity.SCHED_NAME;
				model.INSTANCE_NAME = entity.INSTANCE_NAME;
				model.LAST_CHECKIN_TIME = entity.LAST_CHECKIN_TIME;
				model.CHECKIN_INTERVAL = entity.CHECKIN_INTERVAL;
 
                return model;
            }
            else
            {
                return null;
            }
        }

        public virtual bool IsExists(string id)
        {
            return m_Rep.IsExist(id);
        }
		  public void Dispose()
        { 
            
        }

	}
}
